#-------------------------------------------------------------------------------
#8 Checking duplicated tags functions
#-------------------------------------------------------------------------------
#8a Function that cycles through tags to check for other tags in the same potential location that might be used to correct the duplicate tag data
#Function recieves a vector where each record is the line, distance, and enq values separated by a space
#Function returns a dataframe of tag_ld data and its associated T or F  
Find_possible_tags=function(tag_ld, FMSdat){
  TISL_condition=census.year=c()
  for(i in 1:length(tag_ld)){
    tag_locations=unlist(strsplit(tag_ld[i], " "))
    #names(tag_locations)[1:3]=c("line", "distance", "enq") Remove bc error & superfluous
    
    #Find Tags In the Fame Location & remove tag's that are those of the enq tag in question
    TISL=FMSdat[which(FMSdat$line==tag_locations[1] & FMSdat$distance==tag_locations[2]),]
    TISL=TISL[-which(TISL$enq==tag_locations[3]),]
    
    #If the length of the TISL df is more than zero, there are potential matches that a T is returned
    #If the length of the TISL df is zero, there is no match
    if(length(TISL[,1])>0){
      TISL_condition[i]=T
      census.year[i]=unique(TISL$census.year)
    }else{
      TISL_condition[i]=F
      census.year[i]=NA
    }
  }
  possible_tags=data.frame(tag_ld=tag_ld, TISL_condition=TISL_condition, census.year=census.year)
  return(possible_tags)
}

#-------------------------------------------------------------------------------
#8b Function that returns tags in similar locations that have data missing from the census year in the duplicated tags
#In other words, if the duplicated tag data contain data for any years that are also in the potentially correct data, an F is returned 
#This function should only run if there are potential tags to check
#Function returns a df of correct years
Return_correct_years=function(utisl, tag_locations, TISL, FMSdat){
  correct_year=c()
  for( i in 1:length(utisl)){ 
    #Get potential data to correct duplicated tag
    tisldf=TISL[which(TISL$enq==utisl[i]),]
    
    #get duplicated tag's data
    duplicated_tag=FMSdat[which(FMSdat$line==tag_locations[1] & FMSdat$distance==tag_locations[2] & FMSdat$enq==tag_locations[3]),]
    
    #Check if duplicated_tag shares any census years with the potentially correct data
    any_years_shared=duplicated_tag$census.year %in% tisldf$census.year
    
    #If any_years_shared containsany T's then there the potentially correct data is not plausible
    length_ays=length(which(any_years_shared==T))
    
    if( length_ays==0){
      correct_year[i]=T
    }else if(length_ays>0){ #No, 
      correct_year[i]=F
    }
  }
  
  tags_plausible=utisl[which(correct_year==T)]
  line=rep(tag_locations[1], length(tags_plausible))
  distance=rep(tag_locations[2], length(tags_plausible))
  enq=rep(tag_locations[3], length(tags_plausible))
  correct_year_df=data.frame(line=line,distance=distance, enq=enq, tags_plausible=tags_plausible)
  return(correct_year_df)
}

#-------------------------------------------------------------------------------
#8c Function that takes the duplicate tags with T values (indicating tags in same location with potential matches), and checks if the potnetial tag matches are:
#1: missing data for the census year that are included in the duplicated tag data (e.g. duplicated tag data is in the census year 10, and the potnetial match has census data for years 9 & 11 only)
#If These three criteria are met, plausibly correct tag data is returned
#This function returns a df of plausibly correct tag data
Return_tags_with_plausible_years=function(possible_tags, FMSdat){
  correct_years=list()
  for(i in 1:length(possible_tags$tag_ld)){
    tf_condition=possible_tags[i,]$TISL_condition
    
    #If tf_condition is false, do nothing and return NA for plot, 
    #If tf_condition is true, cycle throught the potnetial tags to see if any are plausible
    if(tf_condition==F){
      correct_years[[i]]=data.frame(line=NA,
                                    distance=NA,
                                    enq=NA,
                                    tags_plausible=NA,
                                    census.year=NA)
    }else if(tf_condition==T){
      tag_locations=unlist(strsplit(possible_tags[i,]$tag_ld, " "))
      #names(tag_locations)[1:3]=c("line", "distance", "enq") Remove bc error & superfluous
      
      #Find tags In the same location & remove tag's that are those of the enq tag in question
      TISL=FMSdat[which(FMSdat$line==tag_locations[1] & FMSdat$distance==tag_locations[2]),]
      TISL=TISL[-which(TISL$enq==tag_locations[3]),]
      
      #Get unique tag numbers and cycle through them to see if any are missing data in the year that the duplicate tag data is
      utisl=unique(TISL$enq)
      correct_years[[i]]=Return_correct_years(utisl, tag_locations, TISL, FMSdat)
    }
  }
  correct_yearsdf_out=do.call("rbind", correct_years)
  return(correct_yearsdf_out)
}

#-------------------------------------------------------------------------------
#8d A function to sort the data & ask user to select data to keep as "correct", and 
#then prompts to change species name or alter tag number to indicate and error/duplicated tag
#The input is the dup.tag.data, which is a data frame of duplicated tags
#Output should be a data frame of the duplicated tags or a copy of the duplicated tags and an additional df with the duplicated tag's corrections
#If changes Duplicated tags will have an extra column indicating "not changed" if nothing was done
#If changes to the data are made, the duplicated data are 1) returned with with a "delete these data" note
#  2) another df with a column with "correct" data from duplicated tags, 
Change_tag_species_prompts=function(dup.tag.data, FMSdat){
  
  dup.tag.data=dup.tag.data[order(dup.tag.data$distance),]
  dup.tag.data=dup.tag.data[order(dup.tag.data$census.year),]
  dup.tag.data=dup.tag.data[order(dup.tag.data$species_binomial),]
  
  cat("Here is the dupicated tag data. Inspect to determine which rows are likely correct.  \n")
  print(dup.tag.data[,c( "plot", "line", "distance", "census.year", "enq","species_binomial", "dbh", "dgh", "notes" )])
  correct_rows=readline(prompt=cat("Enter the row numbers from above that you think are correct separated by a comma and a space (e.g. 1, 2). 
  \n These should correspond to what appear to be one stem.
                      \n This can be an arbitrary group. You will be prompted to change the species names tag numbers of the other groups."))
  #format user entry to numeric vector
  correct_rows=as.numeric(gsub(",", "", unlist(strsplit(correct_rows, " ", ))))
  
  if(!length(correct_rows)==0){
    #Get user defined "correct" data and then the other data to remove/alter
    correct_data=dup.tag.data[correct_rows,]
    #These are the "incorrect" rows we'll want to check
    user_check_data=dup.tag.data[-correct_rows,]
  
    #get the unique groups from the user_check_data data frame 
    grouped_data=paste(user_check_data$plot, user_check_data$line, user_check_data$distance, user_check_data$enq, user_check_data$species_binomial)
    Uuscd=unique(grouped_data)
    #dup.tag.data
  #Cycle through these Uuscd and prompt the user to change species name and tag
    tag_edits_out=list()
  for( i in 1:length(Uuscd)){
    #select the 
    change_tagsp_df=user_check_data[which(grouped_data==Uuscd[i]),]
    cat("\n 'Correct' data: \n")
    print(correct_data[,c( "plot", "line", "distance", "census.year", "species_binomial", "enq", "dbh", "dgh", "notes" )])
    
    cat( "\n Stem that needs modification: \n")
    print(change_tagsp_df[,c( "plot", "line", "distance", "census.year", "species_binomial", "enq", "dbh", "dgh", "notes" )])
    
    user_RSB_decision=readline(prompt = cat("To re-number this tag with a error prefix of 999999999, enter 'R'.
                        \n To rename the this species_binomial with the correct name, enter 'S'.
                        \n To do both, enter 'B'.
                        \n If the data appear duplicated, you can delete these rows by entering 'DEL' "))
    
    #Ugly-ass way to get the rows from the FMSdata that to change
    #If statement is to deal with missing NA species binomial data
    rows_to_change=c()
    if(is.na(as.factor(change_tagsp_df$species_binomial))){
      rows_to_change=which(dup.tag.data$plot==change_tagsp_df$plot & dup.tag.data$line==change_tagsp_df$line & dup.tag.data$distance==change_tagsp_df$distance & dup.tag.data$enq==change_tagsp_df$enq )
    }else{
      rows_to_change=which(dup.tag.data$plot==change_tagsp_df$plot & dup.tag.data$line==change_tagsp_df$line & dup.tag.data$distance==change_tagsp_df$distance & dup.tag.data$enq==change_tagsp_df$enq & dup.tag.data$species_binomial==change_tagsp_df$species_binomial)
    }
    #dup_tag_data_edited=dup.tag.data <- I think this can be deleted
    
    #R=change enq in FMS data
    #S=change species name in FMS data
    #B= change both enq and species name in FMS data
    if(user_RSB_decision=="R"){
      old_tag=paste(unique(change_tagsp_df$enq), collapse = " ")
      old_notes_tag=paste(unique(change_tagsp_df$notes), collapse = " ")
      
      new_tag=paste(999999999,".", paste(i), ".", old_tag, sep="")
      new_notes_tag=paste("999999999 prefix added to duplicated tag number ", old_tag, ".", "Multiple duplicated tags are designated with a '.#.'", " Check if duplicated in field.", sep= "")
      
      change_tagsp_df$enq=new_tag
      change_tagsp_df$notes=paste(new_notes_tag, old_notes_tag, sep="; ")
      
      change_tagsp_df$corrections=paste("Duplicated data that has been changed")
      correct_data$corrections=paste("correct data")
      
      tag_edits_out[[i]]=change_tagsp_df
      
      cat("Tag altered \n")
      
    }  else if(user_RSB_decision=="S"){
    old_species=paste(unique(change_tagsp_df$species_binomial), collapse = " ")
    old_notes_sp=paste(unique(change_tagsp_df$notes), collapse = " ")
    
    new_species_name=readline(prompt = "Enter the new species binomial for above (CHECK SPELLING!!): \n")
    new_notes_sp=paste("Changed species_binomial from '", old_species, "' to '", new_species_name,"'.", sep="")
    
    change_tagsp_df$species_binomial=new_species_name
    change_tagsp_df$notes=paste(new_notes_sp, old_notes_sp, sep="; ")
    tag_edits_out[[i]]=change_tagsp_df
    cat("Species name altered \n")
    
    }else if(user_RSB_decision=="B"){
    old_tag=paste(unique(change_tagsp_df$enq),collapse = " ")
    old_notes_tag=paste(unique(change_tagsp_df$notes),collapse = " ")
    
    new_tag=paste(999999999,".", paste(i), ".", old_tag, sep="")
    new_notes_tag=paste("999999999 prefix added to duplicated tag number ", old_tag, ".", "Multiple duplicated tags are designated with a '.#.'", " Check if duplicated in field.", sep= "")
    
    old_species=paste(unique(change_tagsp_df$species_binomial), collapse = " ")
    old_notes_sp=paste(unique(change_tagsp_df$notes), collapse = " ")
    
    new_species_name=readline(prompt = "Enter the new species binomial for above (CHECK SPELLING!!): \n")
    new_notes_sp=paste("Changed species_binomial from '", old_species, "' to '", new_species_name,"'.", sep="")
    
    #Update change_tagsp_df for the appropriate information
    change_tagsp_df$enq=new_tag
    change_tagsp_df$species_binomial=new_species_name
    change_tagsp_df$notes=paste(new_notes_tag, new_notes_sp, old_notes, sep="; ")
    tag_edits_out[[i]]=change_tagsp_df
    cat("Tag and species name altered \n")
    
    }else if(user_RSB_decision=="DEL"){
      tag_edits_out[[i]]=change_tagsp_df[0,]
    cat("Rows deleted! \n")
    }else{
      tag_edits_out[[i]]=change_tagsp_df
      cat("skip \n")
    }
    
  }
    
    #combine dup.tag.data, corrected data, and tag_edits_out data
    tag_edits_out2=do.call("rbind", tag_edits_out)
    
    #check if there is data in the tag_edits_out2 output, if none, don't return this df
    if(length(tag_edits_out2[,1])>0){
      tag_edits_out2$corrections=paste("edited data")
      correct_data$corrections=paste("correct data")
      dup.tag.data_corrections=rbind(correct_data, tag_edits_out2)
    
      dup.tag.data$corrections=paste("Duplicated data to remove")
      dup.tag.data_out=rbind(dup.tag.data_corrections, dup.tag.data)
    return(dup.tag.data_out)
    }else{
      correct_data$corrections=paste("correct data")
      dup.tag.data_corrections=rbind(correct_data)
      
      dup.tag.data$corrections=paste("Duplicated data to remove")
      dup.tag.data_out=rbind(dup.tag.data_corrections, dup.tag.data)
      return(dup.tag.data_out)
    }
  }else if(length(correct_rows)==0){
    #No changes made to dup.tag.data, just return, unedited
    dup.tag.data$corrections=paste("Not changed, don't remove")
    dup.tag.data_out=dup.tag.data
    return(dup.tag.data_out)
    cat("Skip")
  }
}

#-------------------------------------------------------------------------------
#8e A function that checks the enq from tags_plausible column in the plausible_year_data data frame 
#1) Checks if the species is the same 
#2) Check if the growth is plausible based on annual growth increment of less than 0.7cm, no less than a 5% decrease
#The function returns T/F for plausible growth data, the plausible tag #, and the duplicate tag's line, distance, and enq
Plausible_growth_sp_matches=function(plausible_year_data, FMSdat){
  plaus_dat=list()
  for(i in 1:length(plausible_year_data[,1])){
    plaus_tag_check=plausible_year_data[i,]$tags_plausible
    plaus_df=FMSdat[which(FMSdat$enq==plaus_tag_check),]
    
    #Get data for the duplicated tag of interest
    dup.tag.oidf=FMSdat[which(FMSdat$line==plausible_year_data$line & FMSdat$distance==plausible_year_data$distance & FMSdat$enq==plausible_year_data$enq),]
    
    #Check if plausible data and duplicated tag data are the same species
    same_sp=unique(plaus_df$species_binomial)==unique(dup.tag.oidf$species_binomial)
    
    #if no data, just add F
    if(length(same_sp)==0){
      same_sp=F
    }else{
      same_sp=same_sp
    }
    
    #Find most recent census year
    mrcy=plaus_df[which(abs(dup.tag.oidf$census.year-plaus_df$census.year)==min(abs(dup.tag.oidf$census.year-plaus_df$census.year))),]
    
    
    #Check is growth is plausible
    combined_pgrowth=rbind(dup.tag.oidf, mrcy)
    combined_pgrowth=combined_pgrowth[order(combined_pgrowth$census.year),]
    combined_pgrowth=combined_pgrowth[order(combined_pgrowth$species_binomial),]
    
    #get year, dbh, and dgh increments
    year_inc=combined_pgrowth[2,]$census.year-combined_pgrowth[1,]$census.year
    dbh_inc=combined_pgrowth[2,]$dbh-combined_pgrowth[1,]$dbh
    dgh_inc=combined_pgrowth[2,]$dgh-combined_pgrowth[1,]$dgh
    
    #Check if year interval is not 0, and the dbh/dgh ince is not na
    #if the appropriate criteria are true, plausible growth is checked and returned as either T (plausible), or not (F)
    dbh_plaus=dgh_plaus=c()
    if(identical(c(T,T), c(!year_inc==0,  !is.na(dbh_inc))) ){
      dbh_plaus=identical(c(T, T), c(dbh_inc/year_inc<=0.7, -abs(combined_pgrowth[1,]$dbh*0.05)< dbh_inc/year_inc) )
      dgh_plaus=F
    }else if(identical(c(T,T), c(!year_inc==0,  !is.na(dgh_inc))) ){
      dbh_plaus=F
      dgh_plaus=identical(c(T, T), c(dgh_inc/year_inc<=0.7, -abs(combined_pgrowth[1,]$dgh*0.05)< dgh_inc/year_inc) )
    }else if(identical(c(T,T), c(year_inc==0,  is.na(dbh_inc))) ){
      dbh_plaus=F
      dgh_plaus=F
    }else if(identical(c(T,T), c(year_inc==0,  is.na(dgh_inc))) ){
      dbh_plaus=F
      dgh_plaus=F
    }else{
      dbh_plaus=F
      dgh_plaus=F
    }
    
    line=unique(dup.tag.oidf$line)
    #if no data, just add F
    if(length(line)==0){
      line=F
    }else{
      line=line
    }
    
    distance=unique(dup.tag.oidf$distance)
    #if no data, just add F
    if(length(distance)==0){
      distance=F
    }else{
      distance=distance
    }
    
    dup_tag_enq=unique(dup.tag.oidf$enq)
    #if no data, just add F
    if(length(dup_tag_enq)==0){
      dup_tag_enq=F
    }else{
      dup_tag_enq=dup_tag_enq
    }
                       
    
    #make df of plausible data options
    plaus_dat[[i]]=data.frame(dbh_plaus=dbh_plaus, dgh_plaus=dgh_plaus, same_sp=same_sp, 
                              plaus_tag_to_check=plaus_tag_check, line=line, distance=distance, dup_tag_enq=dup_tag_enq)
  }
  plaus_dat_out=do.call("rbind", plaus_dat)
  
  return(plaus_dat_out)
}

#-------------------------------------------------------------------------------
#8f Function takes plausible_growth_data and checks if species are the same and if criteria for plausible growth are met
#If the conditions are met, the duplicate data and plausible data are printed. The user is prompted to confirm combining these data
#If the criteria are not met, the user is prompted to change the species name or tag number
#The output is plausible_dat_change_out, which contains a df of the duplicated tag's to remove 
#(labeled "Duplicated data to remove" in the corrections column) from the  FMSdata
#and it also contains the the data the duplicated tag's data was changed to (labeled "Duplicated data that has been changed" in the corrections column). 
Change_plausible_data_with_user_prompt=function(plaus_criteria, FMSdat){
  
  #Get plausibly correct data to check
  plaus_check=FMSdat[which(FMSdat$enq==plaus_criteria$plaus_tag_to_check),]
  plaus_check=plaus_check[order(plaus_check$census.year),]
  #Get duplicated data to check correct data to check
  rows_to_change=which(FMSdat$enq==plaus_criteria$dup_tag_enq & FMSdat$line==plaus_criteria$line & FMSdat$distance==plaus_criteria$distance)
  dup_check=FMSdat[rows_to_change,]
  
  cat("\n Here are the potentially correct data:")
  print(plaus_check[,c( "plot", "line", "distance", "census.year", "species_binomial", "enq", "dbh", "dgh", "notes" )])
  
  cat("\n Here are the data for the duplicated tag that you can change:")
  print(dup_check[,c( "plot", "line", "distance", "census.year", "species_binomial", "enq", "dbh", "dgh", "notes" )])
  
  user_yn=readline(prompt="Would you like to merge these data and change the tag for the duplicated data? Enter 'y' or 'n' :")
  if(user_yn=='y'){
    #get old data
    old_tag=paste(unique(dup_check$enq), collapse = " ")
    old_plot=paste(unique(dup_check$plot), collapse = " ")
    old_line=paste(unique(dup_check$line), collapse = " ")
    old_dist=paste(unique(dup_check$distance), collapse = " ")
    
    #get new data
    new_enq=unique(plaus_check$enq)
    new_plot=unique(plaus_check$plot)
    new_line=unique(plaus_check$line)
    new_dist=unique(plaus_check$distance)
    
    #make notes
    old_notes=paste(unique(dup_check$notes), collapse = " ")
    new_location_notes=paste("Location changed. Old plot=", old_plot, ", old line=", old_line, ", old dist=", old_dist, sep="")
    new_tag_notes=paste("enq changed from ", old_tag, " to ", new_enq, sep="")
    
    #Make a copy of the dup_check data to update
    dup_check_changed=dup_check
    
    #change FMS data
    dup_check_changed$enq=new_enq
    dup_check_changed$plot=new_plot
    dup_check_changed$line=new_line
    dup_check_changed$distance=new_dist
    dup_check_changed$notes=paste(new_tag_notes, new_location_notes, old_notes, sep="; ")
    
    #Define duplicated data that has bee changes
    dup_check_changed$corrections=paste("Duplicated data that has been changed")
    dup_check$corrections=paste("Duplicated data to remove")
    plausible_dat_change_out=rbind(dup_check_changed, dup_check)
    return(plausible_dat_change_out)
    cat("Duplicate data changed and merged with plausible data")
    
  }else if(user_yn=='n'){
    user_RSB_decision=readline(prompt = cat("To re-number this tag with a error prefix of 999999999, enter 'R'.
                        \n To rename the this species_binomial with the correct name, enter 'S'.
                        \n To do both, enter 'B'. "))
    
    #R=change enq in FMS data
    #S=change species name in FMS data
    #B= change both enq and species name in FMS data
    if(user_RSB_decision=="R"){
      old_tag=paste(unique(dup_check$enq), collapse = " ")
      old_notes_tag=paste(unique(dup_check$notes), collapse = " ")
      new_notes_tag=paste("999999999 prefix added to duplicated tag number ", old_tag, ".", " Check if duplicated in field.", sep= "")
      
      #make copy of dup_check to update changes
      dup_check_changed=dup_check
      dup_check_changed$enq=paste(999999999, old_tag, sep="")
      dup_check_changed$notes=paste(new_notes_tag, old_notes_tag, sep="; ")
      
      
      dup_check_changed$corrections=paste("Duplicated data that has been changed")
      dup_check$corrections=paste("Duplicated data to remove")
      plausible_dat_change_out=rbind(dup_check_changed, dup_check)
      return(plausible_dat_change_out)
      cat("Tag altered \n")
      
      
    }else if(user_RSB_decision=="S"){
      old_notes_sp=paste(unique(dup_check$notes), collapse = " ")
      
      new_species_name=readline(prompt = "Enter the new species binomial for above (CHECK SPELLING!!): \n")
      new_notes_sp=paste("Changed species_binomial from '", old_species, "' to '", new_species_name,"'.", sep="")
      
      #make copy of dup_check to update changes
      dup_check_changed=dup_check
      dup_check_changed$species_binomial=new_species_name
      dup_check_changed$notes=paste(new_notes_sp, old_notes_sp, sep="; ")
      
      dup_check_changed$corrections=paste("Duplicated data that has been changed")
      dup_check$corrections=paste("Duplicated data to remove")
      plausible_dat_change_out=rbind(dup_check_changed, dup_check)
      return(plausible_dat_change_out)
      cat("Species name altered \n")
      
    }else if(user_RSB_decision=="B"){
      old_tag=paste(unique(dup_check$enq), collapse = " ")
      old_notes_tag=paste(unique(dup_check$notes), collapse = " ")
      
      new_notes_tag=paste("999999999 prefix added to duplicated tag number ", old_tag, ".", " Check if duplicated in field.", sep= "")
      
      old_species=paste(unique(dup_check$species_binomial), collapse = " ")
      #old_notes_sp=unique(dup_check$notes)
      
      new_species_name=readline(prompt = "Enter the new species binomial for above (CHECK SPELLING!!): \n")
      new_notes_sp=paste("Changed species_binomial from '", old_species, "' to '", new_species_name,"'.", sep="")
      
      #make copy of dup_check to update changes
      dup_check_changed=dup_check
      dup_check_changed$enq=paste(999999999, old_tag, sep="")
      dup_check_changed$species_binomial=new_species_name
      dup_check_changed$notes=paste(new_notes_tag, new_notes_sp, old_notes, sep="; ")
      
      dup_check_changed$corrections=paste("Duplicated data that has been changed")
      dup_check$corrections=paste("Duplicated data to remove")
      plausible_dat_change_out=rbind(dup_check_changed, dup_check)
      return(plausible_dat_change_out)
      cat("Tag and species name altered \n")
    }else{
      cat("skip \n")
    }
    
  }
  
}

#-------------------------------------------------------------------------------
#8g A function that cylce through the plausible_growth_data for appropriate growth & species
#The Change_plausible_data_with_user_prompt duplicated data is based on user prompts and changes data if appropriate
#The function returns the first df ([[1]]) T/F if the data were altered, and a 2nd df with the changes that were made
Find_and_alter=function(plausible_growth_data, FMSdat){
  data_altered=c()
  plausible_data_changeddf=list()
  for(i in 1:length(plausible_growth_data[,1])){
    #check criteria for plausible tags
    plaus_criteria=plausible_growth_data[i,]
    
    #If dbh growth is plausbile and dgh growth is plausible, ask user to confirm re-defining tag number of duplicated number
    if(identical(c(T,T), c(plausible_growth_data$dbh_plaus, plausible_growth_data$same_sp))){
      plausible_data_changeddf[[i]]=Change_plausible_data_with_user_prompt(plaus_criteria, FMSdat)
      data_altered[i]=T
    }else if(identical(c(T,T), c(plausible_growth_data$dgh_plaus, plausible_growth_data$same_sp))){
      plausible_data_changeddf[[i]]=Change_plausible_data_with_user_prompt(plaus_criteria, FMSdat)
      data_altered[i]=T
    }else{
      cat("No clear plausible data \n")
      data_altered[i]=F
    }
  }
  plausible_data_changeddf2=do.call("rbind", plausible_data_changeddf)
  plausible_growth_data$data_altered=data_altered
  return(list(plausible_growth_data, plausible_data_changeddf2))
}

#-------------------------------------------------------------------------------
#8h This function takes the altered_or_not df and checks for any individuals from the duplicated tag df that have been altered
#Any altered individuals are ommited, then the function cycles through individuals to ask user for prompts to change tag or species name
#Output is a df of duplicated data, with a column called "corrections" indicating the correct data, data were changed
Prompt_user_to_alter_duplicates=function(altered_or_not, dup.tag.data, FMSdat){

  need_to_check=altered_or_not[which(altered_or_not$data_altered==F),]
  
  
  new_dups=dup.tag.data[which(dup.tag.data$enq %in% need_to_check$dup_tag_enq),]
  new_dups=new_dups[order(new_dups$census.year),]
  new_dups=new_dups[order(new_dups$distance),]
  new_dups=new_dups[order(new_dups$species_binomial),]
  
  if(length(new_dups[,1])>0){
    cat("Here is the dupicated tag data. Inspect to determine which rows are likely correct.  \n")
    print(new_dups[,c( "plot", "line", "distance", "census.year", "enq","species_binomial", "dbh", "dgh", "notes" )])
    correct_rows=readline(prompt=cat("Enter the row numbers from above that you think are correct separated by a comma and a space (e.g. 1, 2). 
  \n These should correspond to what appear to be one stem.
                      \n This can be an arbitrary group. You will be prompted to change the species names tag numbers of the other groups."))
    #format user entry to numeric vector
    correct_rows=as.numeric(gsub(",", "", unlist(strsplit(correct_rows, " ", ))))
    
    if(!length(correct_rows)==0){
      #Get user defined "correct" data and then the other data to remove/alter
      correct_data=new_dups[correct_rows,]
      user_check_data=new_dups[-correct_rows,]
    
      #get the unique groups from the user_check_data data frame 
      grouped_data=paste(user_check_data$plot, user_check_data$line, user_check_data$distance, user_check_data$enq, user_check_data$species_binomial)
      Uuscd=unique(grouped_data)
    
      #Cycle through these Uuscd and prompt the user to change species name and tag
      tag_edits_out=list()
      for( i in 1:length(Uuscd)){
      change_tagsp_df=user_check_data[which(grouped_data==Uuscd[i]),]
      cat(" 'Correct' data: \n")
      print(correct_data[,c( "plot", "line", "distance", "census.year", "species_binomial", "enq", "dbh", "dgh", "notes" )])
      
      cat( "Stem that needs modification: \n")
      print(change_tagsp_df[,c( "plot", "line", "distance", "census.year", "species_binomial", "enq", "dbh", "dgh", "notes" )])
      
      user_RSB_decision=readline(prompt = cat("To re-number this tag with a error prefix of 999999999, enter 'R'.
                        \n To rename the this species_binomial with the correct name, enter 'S'.
                        \n To do both, enter 'B'.
                        \n If the data appear duplicated, you can delete these rows by entering 'DEL'. "))
      
      #Ugly-ass way to get the rows from the FMSdata that to change
      #If statement is to deal with missing NA species binomial data
      rows_to_change=c()
      if(is.na(as.factor(change_tagsp_df$species_binomial))){
        rows_to_change=which(FMSdat$plot==change_tagsp_df$plot & FMSdat$line==change_tagsp_df$line & FMSdat$distance==change_tagsp_df$distance & FMSdat$enq==change_tagsp_df$enq )
      }else{
        rows_to_change=which(FMSdat$plot==change_tagsp_df$plot & FMSdat$line==change_tagsp_df$line & FMSdat$distance==change_tagsp_df$distance & FMSdat$enq==change_tagsp_df$enq & FMSdat$species_binomial==change_tagsp_df$species_binomial)
      }
      
      #R=change enq in FMS data
      #S=change species name in FMS data
      #B= change both enq and species name in FMS data
      if(user_RSB_decision=="R"){
        old_tag=paste(unique(change_tagsp_df$enq), collapse = " ")
        old_notes_tag=paste(unique(change_tagsp_df$notes), collapse = " ")
        
        new_tag=paste(999999999,".", paste(i), ".", old_tag, sep="")
        new_notes_tag=paste("999999999 prefix added to duplicated tag number ", old_tag, ".", "Multiple duplicated tags are designated with a '.#.'", " Check if duplicated in field.", sep= "")
        
        change_tagsp_df$enq=new_tag
        change_tagsp_df$notes=paste(new_notes_tag, old_notes_tag, sep="; ")
        tag_edits_out[[i]]=change_tagsp_df
        cat("Tag altered \n")
        
      }else if(user_RSB_decision=="S"){
        old_species=paste(unique(change_tagsp_df$species_binomial), collapse = " ")
        old_notes_sp=paste(unique(change_tagsp_df$notes), collapse = " ")
        
        new_species_name=readline(prompt = "Enter the new species binomial for above (CHECK SPELLING!!): \n")
        new_notes_sp=paste("Changed species_binomial from '", old_species, "' to '", new_species_name,"'.", sep="")
        
        change_tagsp_df$species_binomial=new_species_name
        change_tagsp_df$notes=paste(new_notes_sp, old_notes_sp, sep="; ")
        tag_edits_out[[i]]=change_tagsp_df
        cat("Species name altered \n")
        
      }else if(user_RSB_decision=="B"){
        old_tag=paste(unique(change_tagsp_df$enq),collapse = " ")
        old_notes_tag=paste(unique(change_tagsp_df$notes),collapse = " ")
        
        new_tag=paste(999999999,".", paste(i), ".", old_tag, sep="")
        new_notes_tag=paste("999999999 prefix added to duplicated tag number ", old_tag, ".", "Multiple duplicated tags are designated with a '..#.'", " Check if duplicated in field.", sep= "")
        
        old_species=paste(unique(change_tagsp_df$species_binomial), collapse = " ")
        old_notes_sp=paste(unique(change_tagsp_df$notes), collapse = " ")
        
        new_species_name=readline(prompt = "Enter the new species binomial for above (CHECK SPELLING!!): \n")
        new_notes_sp=paste("Changed species_binomial from '", old_species, "' to '", new_species_name,"'.", sep="")
        
        #Update FMSdat for the appropriate information
        change_tagsp_df$enq=new_tag
        change_tagsp_df$species_binomial=new_species_name
        change_tagsp_df$notes=paste(new_notes_tag, new_notes_sp, sep="; ")
        tag_edits_out[[i]]=change_tagsp_df
        cat("Tag and species name altered \n")
        
      }else if(user_RSB_decision=="DEL"){
        
        tag_edits_out[[i]]=change_tagsp_df[0,]
        cat("Rows deleted! \n")
      }else{
        cat("skip \n")
      }
      }
      #Combine any data that was changed
      tag_edits_out2=do.call("rbind", tag_edits_out)
      if(length(tag_edits_out2[,1])>0){
        tag_edits_out2$corrections=paste("edited data")
        
        #Add column to correct data
        correct_data$corrections=paste("correct data")
        
        #combines the new_dups, tag_edits_out, and correct_data to an output
        dup.tag.data_corrections=rbind(correct_data, tag_edits_out2)
        
        #Add column to data that was checked
        new_dups$corrections=paste("Duplicated data to remove")
        
        #combine new_dups and dup.tag.data_corrections
        dup.tag.data_out=rbind(dup.tag.data_corrections, new_dups)
        return(dup.tag.data_out)
      }else{
        #Add column to correct data
        correct_data$corrections=paste("correct data")
        
        #combines the new_dups, tag_edits_out, and correct_data to an output
        dup.tag.data_corrections=rbind(correct_data)
        
        #Add column to data that was checked
        new_dups$corrections=paste("Duplicated data to remove")
        
        #combine new_dups and dup.tag.data_corrections
        dup.tag.data_out=rbind(dup.tag.data_corrections, new_dups)
        return(dup.tag.data_out)
      }
      
      
      
    }else if(correct_rows[1]==""){
      #Do nothing, just return unedited duptags
      dup.tag.data_out=new_dups
      dup.tag.data_out$corrections=paste("Not changed, don't remove")
      
      return(dup.tag.data_out)
      cat("Skip")
      }
  }else{
    dup.tag.data_out=new_dups
    dup.tag.data_out$corrections=paste("Not changed, don't remove")
    return(dup.tag.data_out)
    cat("nothing to do...? \n")
  }
  
}

#-------------------------------------------------------------------------------
#8 -Final: Note this function combines those defined above. The functions above need to be run before  this function is run
#A function that checks for duplicate tag (enq's) within any year for a given site
#The function asks for user prompts to change tags when necessary
#Input is FMSdat and the output is potentially altered & corrected species names and tag numbers for duplicated tags
#Any changes that are made to duplicate tags are accompanied by updated notes for data that was changed (i.e. old data is recorded in the notes)
Checking_and_correcting_duplicate_tags=function(FMSdat){
  #Count number of tags for each species
  tag_count=aggregate(FMSdat$species_binomial, list(enq=FMSdat$enq), FUN=function(x)(length(unique(x))))
  #Get tags with counts of more than 1
  duptags=tag_count[which(tag_count$x>1),]
  
  #Count the number of tags recorded for each year
  tag_count_peryear=aggregate(FMSdat$site, list( census.year=FMSdat$census.year, enq=FMSdat$enq), length)
  #Get tags with more than 1 count per year
  duptags_peryear=tag_count_peryear[which(tag_count_peryear$x>1),]#there are up to 4 different measurements per year with the same enq # per site
  
  #combine duplicate tag data and get unique duplicated tags
  duptagslist=unique(c(duptags$enq, duptags_peryear$enq))
  
  #Loop through 
  fmsdat.tagchecksout=list()
  for( i in 1:length( duptagslist)){
    dup.tag.data=FMSdat[which(FMSdat$enq %in% duptagslist[i]),]
    
    #Get the frequencies for each duplicate tag within its given line and it's distance
    Freq_df=data.frame(table(paste(dup.tag.data$line, dup.tag.data$distance, dup.tag.data$enq)))
    
    #Get the length of the unique frequencies
    LUF=length(unique(Freq_df$Freq))
    
    #If the length is 1, there are not different frequencies, so any stem could be erroneous
    #If the length is greater than 1, there are different frequencies, and the most frequent stem is assumed to be correct 
    if(LUF==1){
      #SAME Frequency:
      #Get unique tags and line/distance 
      tag_ld=as.vector(unique(Freq_df$Var1))
      possible_tags=Find_possible_tags(tag_ld, FMSdat)
      plausible_year_data=Return_tags_with_plausible_years(possible_tags, FMSdat)
      
      #If the length of the plausible_year_data df is not zero, tags missing plausible years has been returned-> check to see if duplicated tag growth is plausible for these/this stem
      #If the length of the plausible_year_data df is zero, no data has been returned, use function to ask user to select data 
      if(length(plausible_year_data[,1])>0){
        
        #Return data indicating if growth data is plausible
        plausible_growth_data=Plausible_growth_sp_matches(plausible_year_data, FMSdat)
        
        #Find and alter any potentially plausible data - function will ask for user input
        altered_or_not=Find_and_alter(plausible_growth_data, FMSdat)
        
        #implement  function here: ?
        Prompt_user_to_alter_duplicates(altered_or_not, dup.tag.data, FMSdat)
        
      }else if(length(plausible_year_data[,1])==0){
        Change_tag_species_prompts(dup.tag.data, FMSdat)
      }
      
      
    }else if(LUF>1){
      #DIFFERENT Frequency
      #Get the location data for the individual with the greatest frequncy
      correct_loc=Freq_df[-which(Freq_df$Freq==max(Freq_df$Freq)),]$Var1
      correct_df=FMSdat[which(paste(FMSdat$line, FMSdat$distance, FMSdat$enq)==correct_loc),]
      
      incorrect_loc=as.vector(Freq_df[-which(Freq_df$Freq==max(Freq_df$Freq)),]$Var1)
      incorrect_df=FMSdat[which(paste(FMSdat$line, FMSdat$distance, FMSdat$enq) %in% incorrect_loc),]
      
      possible_tags=Find_possible_tags(incorrect_loc, FMSdat)
      plausible_year_data=Return_tags_with_plausible_years(possible_tags, FMSdat) 
      if(length(plausible_year_data[,1])>0){
        
        #Return data indicating if growth data is plausible
        plausible_growth_data=Plausible_growth_sp_matches(plausible_year_data, FMSdat)
        
        #Find and alter any potentially plausible data - function will ask for user input
        altered_or_not=Find_and_alter(plausible_growth_data, FMSdat)
        
        #implement  function here: ?
        Prompt_user_to_alter_duplicates(altered_or_not, dup.tag.data, FMSdat)
        
      }else if(length(plausible_year_data[,1])==0){
        Change_tag_species_prompts(dup.tag.data, FMSdat)
      }
    }

  }
  return(FMSdat)
 
}












predict.CI[h,]=quantile(na.omit(Tleaf.predic2[h,]),c(0.025,0.975))
mean.tcurve2[h]=mean(na.omit(Tleaf.predic2[h,]))
}
xvals2=seq.int(from=min(df1$Tleaf), to=max(df1$Tleaf), length.out = 75)
lines(xvals2, mean.tcurve2, col="red", lwd=1.5)
T.opt2=as.numeric(as.character(T.opt2))
P.opt2=as.numeric(as.character(P.opt2))
T.max=as.numeric(as.character(T.max))
coefa=as.numeric(as.character(coefa))
coefb=as.numeric(as.character(coefb))
Tmin=as.numeric(as.character(T.min))
tmax.data[[i]]=data.frame(curveID=paste(unique(df1$curveID)),
Source=paste(unique(df1$SourceT90)),
Taxon=paste(unique(df1$Accepted.name)),
mean.Topt2=mean(na.omit(T.opt2)),
t.lci2=quantile(na.omit(T.opt2), 0.025)[[1]],
t.uci2=quantile(na.omit(T.opt2), 0.975)[[1]],
mean.Popt2=mean(na.omit(P.opt2)),
p.lci2=quantile(na.omit(P.opt2), 0.025)[[1]],
p.uci2=quantile(na.omit(P.opt2), 0.975)[[1]],
mean.Tmax=mean(na.omit(T.max)),
Tmax.lci=quantile(na.omit(T.max), 0.025)[[1]],
Tmax.uci=quantile(na.omit(T.max), 0.975)[[1]],
mean.coefa=mean(na.omit(coefa)),
coefa.lci=quantile(na.omit(coefa), 0.025)[[1]],
coefa.uci=quantile(na.omit(T.max), 0.975)[[1]],
mean.coefb=mean(na.omit(coefb)),
coefb.lci=quantile(na.omit(coefb), 0.025)[[1]],
coefb.uci=quantile(na.omit(coefb), 0.975)[[1]],
mean.Tmin=mean(na.omit(Tmin)),
Tmin.lci=quantile(na.omit(Tmin), 0.025)[[1]],
Tmin.uci=quantile(na.omit(Tmin), 0.975)[[1]]
)
#for plotting values into plot
#m2t1= round(tmax.data[[i]]$mean.Tmax, 1)
#m2t2 =round(tmax.data[[i]]$mean.Topt2, 1)
#m2t3 = round(tmax.data[[i]]$mean.Popt2, 1)
#eq4= bquote('T' [max] == .(m2t1))
#eq5= bquote('T' [opt] == .(m2t2))
#eq6= bquote("P" [opt] == .(m2t3))
#text(45, 23.5, eq4, col="red", pos=2, cex=0.75);
#text(45, 22, eq5, col="red", pos=2, cex=0.75)
#text(45, 20.5, eq6, col="red", pos=2, cex=0.75)
}
#dev.off()
tomegdat=do.call("rbind", tomeg.data)
tmaxdat=do.call("rbind", tmax.data)
td.a=merge(tomegdat, tmaxdat)
setwd("/Users/timothyperez/Desktop/ATData/")
df1
dev.off()
data.frame(curveID=paste(unique(df1$curveID)),
Source=paste(unique(df1$SourceT90)),
Taxon=paste(unique(df1$Accepted.name)),
lat_measurement_site=paste(unique(df1$lat_measurement_site)),
lon_measurement_site=paste(unique(df1$lon_measurement_site)),
lat_provenance=paste(unique(df1$lat_provenance)),
lon_provenance=paste(unique(df1$lon_provenance)),
elevation_m=paste(unique(df1$elevation_m)),
mean.Topt=mean(na.omit(T.opt1)),
t.lci=quantile(na.omit(T.opt1), 0.025)[[1]],
t.uci=quantile(na.omit(T.opt1), 0.975)[[1]],
mean.Popt=mean(na.omit(P.opt1)),
p.lci=quantile(na.omit(P.opt1), 0.025)[[1]],
p.uci=quantile(na.omit(P.opt1), 0.975)[[1]],
mean.Tomeg=mean(na.omit(T.omeg)),
Tomeg.lci=quantile(na.omit(T.omeg), 0.025)[[1]],
Tomeg.uci=quantile(na.omit(T.omeg), 0.975)[[1]])
paste(unique(df1$curveID))
paste(unique(df1$SourceT90))
paste(unique(df1$Accepted.name))
paste(unique(df1$lat_measurement_site)),
paste(unique(df1$lat_measurement_site))
paste(unique(df1$lon_measurement_site))
paste(unique(df1$lat_provenance))
paste(unique(df1$SourceT90)),
paste(unique(df1$SourceT90))
#################################################################################
atdat=read.csv("/Users/timothyperez/Desktop/ATData/literature_AT_ancillary.03.18.2021.v1.csv")
#Remove data deemd to have poor model fits
poor.fits=c(65, 114, 48, 49, 63, 465, 466, 467, 468, 80, 81, 82, 129, 131, 415, 32, 33, 149, 151, 437, 401, 402, 410, 223, 224, 225, 162, 500, 504, 377, 501)
atdat=atdat[-which(atdat$curveID %in% poor.fits),]
which(unique(atdat$curveID)==65); which(unique(atdat$curveID)==114) #check to make sure these are gone
colnames(atdat)[which(colnames(atdat)=="Tleaf_C")]="Tleaf"
colnames(atdat)[which(colnames(atdat)=="A_umol_m2_s")]="A"
#Unique ID's for AT curves
atdat$uid=paste(atdat$Accepted.name, atdat$SourceT90, atdat$curveID)
#Remove any curves with fewer than 5 data points
freqdf=data.frame(table(atdat$uid))
lessthan5=freqdf[which(freqdf$Freq<5),]$Var1
atdat=atdat[-which(atdat$uid %in% lessthan5),]
#Unique number of curves
uid=sort(unique(atdat$uid))
atdat=read.csv("/Users/timothyperez/Desktop/ATData/literature_AT_ancillary.03.18.2021.v1.csv")
#Remove data deemd to have poor model fits
poor.fits=c(65, 114, 48, 49, 63, 465, 466, 467, 468, 80, 81, 82, 129, 131, 415, 32, 33, 149, 151, 437, 401, 402, 410, 223, 224, 225, 162, 500, 504, 377, 501)
atdat=atdat[-which(atdat$curveID %in% poor.fits),]
which(unique(atdat$curveID)==65); which(unique(atdat$curveID)==114) #check to make sure these are gone
colnames(atdat)[which(colnames(atdat)=="Tleaf_C")]="Tleaf"
colnames(atdat)[which(colnames(atdat)=="A_umol_m2_s")]="A"
#Unique ID's for AT curves
atdat$uid=paste(atdat$Accepted.name, atdat$SourceT90, atdat$curveID)
#Remove any curves with fewer than 5 data points
freqdf=data.frame(table(atdat$uid))
lessthan5=freqdf[which(freqdf$Freq<5),]$Var1
atdat=atdat[-which(atdat$uid %in% lessthan5),]
#Unique number of curves
uid=sort(unique(atdat$uid))
pdf("/Users/timothyperez/Desktop/ATData/A-T.curves..pdf", width = 8, height = 11)
par(mfrow=c(8,5), mai=c(0,0,0,0), mgp=c(1.5,.35, 0), oma=c(4, 5, 1, 1), cex.lab=1.25, cex.axis=0.75)
#plot(NULL, NULL, col=alpha("darkgreen", .5), ylim=c(0,30), xlim=c(25,46), ann=FALSE, yaxt='n', xaxt='n')
tomeg.data=tmax.data=list(); set.seed(23) #length(uid)
for(i in 1:length(uid)){
df1=atdat[which(atdat$uid==uid[i]),]
plot(df1$Tleaf, df1$A, col=alpha("dark green", .5), ylim=c(0,65), pch=19,
xlim=c(0,54), ann=FALSE, yaxt='n', xaxt='n')#Plot all points for subset data
#arrows(df1$Tleaf, df1$A, df1$Tleaf, df1$A+(1.96*df1$sdA), angle=90, length=0.01, col=alpha("black", 0.25))
#arrows(df1$Tleaf, df1$A, df1$Tleaf, df1$A-(1.96*df1$sdA), angle=90, length=0.01, col=alpha("black", 0.25))
text(0,64 , pos=4, paste(unique(df1$Taxon)), font=4,cex=.5)
text(0,60 , pos=4, paste(unique(df1$SourceT90)), font=4,cex=.5)
text(0,56, pos=4, paste(unique(df1$curveID)), font=4,cex=.5)
#Paste into the plot at the given x,y coordinates, the name of the genus of interest
mtext(expression("Leaf temperature ("~degree~ "C)"), 1, 2, outer=TRUE)
mtext(expression("Photosynthesis ("~mu~"mol m"^-2~"s"^-1~")"), 2, 2, outer=TRUE)
axis(1, outer = T)
axis(2,outer = T)
axis(1, outer = F, labels = F)
axis(2,outer = F, labels = F)
#T.max=
P.opt=T.opt=T.omeg=c()#empty vectors that will hold estimates for Topt and Popt for each iteration of bootstrapping/resampling
Tleaf.predic=matrix(NA,75,1000)
#v bootstrapping starts
for(k in 1:1000){
srows <- sample(1:nrow(df1),nrow(df1),TRUE)#randomly selcts rows from our subset data
df2=df1[srows,]#here, select randomly sampled rows & create a data frame
#Below is an if, else logical statement that we use to "catch errors using the "try" function
#Basically, the try function just evaluates whether or not the nls function that we use to model our data produces an error
if(class(try(nls(A~ (Pop*exp(-((Tleaf - Top)/(omeg))^2)), data=df2, start = list(Pop=15,  Top=28, omeg=18)), silent=T)[[1]])=="nlsModel")
{fit.Tleaf <- nls(A~ (Pop*exp(-((Tleaf - Top)/(omeg))^2)), data=df2, start = list(Pop=15,  Top=28, omeg=18))
pred.df=data.frame(Tleafs = seq.int(from=min(na.omit(df2$Tleaf)), to=max(na.omit(df2$Tleaf)), length.out = 75))#list of x values (temperature values)
pred.Tleaf=predict(fit.Tleaf, newdata=list(Tleaf=pred.df$Tleafs), type='response', se.fit=TRUE)
df3=data.frame(Tleafs=pred.df$Tleafs, A=pred.Tleaf)
Tleaf.predic[,k]=pred.Tleaf #These are he predictions from the leaf temperatre model...in other words these are the assimilation rates
T.opt[k]=df3[which(df3$A==max(df3$A)),]$Tleafs#Here we extract the leaf temperature where assiilation is predictd to be highest
T.omeg[k]=coef(fit.Tleaf)[3]#Here we extract the leaf temperature where assiilation is predictd to be highest
P.opt[k]=max(df3$A)
}else{(class(try(nls(A~ (Pop*exp(-((Tleaf - Top)/(omeg))^2)), data=df2, start = list(Pop=15,  Top=28, omeg=18)), silent=T)[[1]])=="list")
Tleaf.predic[,k]="NA"
T.opt[k]="NA"
P.opt[k]="NA"
T.omeg[k]="NA"}
}
#^bootstrapping ends
Tleaf.predic=apply(Tleaf.predic, 2, as.numeric)#thisjust turns our matrix of predictions into numbers
predict.CI=matrix(NA,75,2)
mean.tcurve=c()
#Here this forloop just calculates the 95% confidence interval and the mean for our bootstrapped data
for (h in 1:length(Tleaf.predic[,1])){
predict.CI[h,]=quantile(na.omit(Tleaf.predic[h,]),c(0.025,0.975))
mean.tcurve[h]=mean(na.omit(Tleaf.predic[h,]))
}
xvals=seq.int(from=min(df1$Tleaf), to=max(df1$Tleaf), length.out = 75)
#lines(xvals, predict.CI[,1], lty=2, col="purple")
lines(xvals, mean.tcurve, col="black", lwd=1.5)
#lines(xvals, predict.CI[,2], lty=2, col="purple")
T.opt1=as.numeric(as.character(T.opt))
P.opt1=as.numeric(as.character(P.opt))
T.omeg=as.numeric(as.character(T.omeg))
tomeg.data[[i]]=data.frame(curveID=paste(unique(df1$curveID)),
Source=paste(unique(df1$SourceT90)),
Taxon=paste(unique(df1$Accepted.name)),
lat_measurement_site=paste(unique(df1$lat_measurement_site)),
lon_measurement_site=paste(unique(df1$lon_measurement_site)),
lat_provenance=paste(unique(df1$lat_provenance))[],
lon_provenance=paste(unique(df1$lon_provenance)),
elevation_m=paste(unique(df1$elevation_m)),
mean.Topt=mean(na.omit(T.opt1)),
t.lci=quantile(na.omit(T.opt1), 0.025)[[1]],
t.uci=quantile(na.omit(T.opt1), 0.975)[[1]],
mean.Popt=mean(na.omit(P.opt1)),
p.lci=quantile(na.omit(P.opt1), 0.025)[[1]],
p.uci=quantile(na.omit(P.opt1), 0.975)[[1]],
mean.Tomeg=mean(na.omit(T.omeg)),
Tomeg.lci=quantile(na.omit(T.omeg), 0.025)[[1]],
Tomeg.uci=quantile(na.omit(T.omeg), 0.975)[[1]])
#plotting values into plot
#t1=round(tomeg.data[[i]]$mean.Tomeg, 1)
#t2=round(tomeg.data[[i]]$mean.Topt, 1)
#t3=round(tomeg.data[[i]]$mean.Popt, 1)
#eq1= bquote(Omega == .(t1))
#eq2= bquote('T' [opt] == .(t2))
#eq3= bquote("P" [opt] == .(t3))
#text(45, 28, eq1, col="black", pos=2, cex=0.75);
#text(45, 26.5, eq2, col="black", pos=2, cex=0.75)
#text(45, 25, eq3, col="black", pos=2, cex=0.75)
P.opt2=T.opt2=T.max=coefa=coefb=T.min=c()#empty vectors that will hold estimates for Topt and Popt for each iteration of bootstrapping/resampling
Tleaf.predic2=matrix(NA,75,1000)
#v bootstrapping starts
for(k in 1:1000){
srows <- sample(1:nrow(df1),nrow(df1),TRUE)#randomly selcts rows from our subset data
df2=df1[srows,]#here, select randomly sampled rows & create a data frame
#Below is an if, else logical statement that we use to "catch errors using the "try" function
#Basically, the try function just evaluates whether or not the nls function that we use to model our data produces an error
if(class(try(nls(A~ (b*(Tleaf - Tmin)*( 1-( exp(cc*(Tleaf-Tmax)))))^2, data=df2, start = list(b=.1, cc=.1, Tmax=48, Tmin=13)), silent=T)[[1]])=="nlsModel")
{fit.Tleaf2 <- nls(A~ (b*(Tleaf - Tmin)*( 1-( exp(cc*(Tleaf-Tmax)))))^2, data=df2, start = list(b=.1, cc=.1, Tmax=48, Tmin=13))
pred.df2=data.frame(Tleafs = seq.int(from=min(na.omit(df2$Tleaf)), to=max(na.omit(df2$Tleaf)), length.out = 75))#list of x values (temperature values)
pred.Tleaf2=predict(fit.Tleaf, newdata=list(Tleaf=pred.df$Tleafs), type='response', se.fit=TRUE)
#x.fit.PET=seq(from = 171, to = 1440, by=31)
#pred.PET=predict(fit.PET, list(Rainy.days=x.fit.PET))
df32=data.frame(Tleafs=pred.df2$Tleafs, A=pred.Tleaf2)
Tleaf.predic2[,k]=pred.Tleaf2 #These are he predictions from the leaf temperatre model...in other words these are the assimilation rates
T.opt2[k]=df32[which(df32$A==max(df32$A)),]$Tleafs#Here we extract the leaf temperature where assiilation is predictd to be highest
T.max[k]=coef(fit.Tleaf2)[3]#Here we extract the leaf temperature where assiilation is predictd to be highest
P.opt2[k]=max(df32$A)
coefa[k]=coef(fit.Tleaf2)[1]
coefb[k]=coef(fit.Tleaf2)[2]
T.min[k]=coef(fit.Tleaf2)[4]
#aftop=df3[which(df3$Tleafs>30),]
#T.max[k]=which(abs(aftop$A-1)==min(abs(aftop$A-1)))
#lines(pred.df$GDs, pred.GD, col=alpha(df2$kolor, 0.025))
}else{(class(try(nls(A~ (b*(Tleaf - Tmin)*( 1-( exp(cc*(Tleaf-Tmax)))))^2, data=df2, start = list(b=.1, cc=.1, Tmax=48, Tmin=13)), silent=T)[[1]])=="list")
Tleaf.predic2[,k]="NA"
T.opt2[k]="NA"
P.opt2[k]="NA"
T.max[k]="NA"
}}
#^bootstrapping ends
Tleaf.predic2=apply(Tleaf.predic2, 2, as.numeric)#thisjust turns our matrix of predictions into numbers
predict.CI2=matrix(NA,75,2)
mean.tcurve2=c()
#Here this forloop just calculates the 95% confidence interval and the mean for our bootstrapped data
for (h in 1:length(Tleaf.predic2[,1])){
predict.CI[h,]=quantile(na.omit(Tleaf.predic2[h,]),c(0.025,0.975))
mean.tcurve2[h]=mean(na.omit(Tleaf.predic2[h,]))
}
xvals2=seq.int(from=min(df1$Tleaf), to=max(df1$Tleaf), length.out = 75)
lines(xvals2, mean.tcurve2, col="red", lwd=1.5)
T.opt2=as.numeric(as.character(T.opt2))
P.opt2=as.numeric(as.character(P.opt2))
T.max=as.numeric(as.character(T.max))
coefa=as.numeric(as.character(coefa))
coefb=as.numeric(as.character(coefb))
Tmin=as.numeric(as.character(T.min))
tmax.data[[i]]=data.frame(curveID=paste(unique(df1$curveID)),
Source=paste(unique(df1$SourceT90)),
Taxon=paste(unique(df1$Accepted.name)),
mean.Topt2=mean(na.omit(T.opt2)),
t.lci2=quantile(na.omit(T.opt2), 0.025)[[1]],
t.uci2=quantile(na.omit(T.opt2), 0.975)[[1]],
mean.Popt2=mean(na.omit(P.opt2)),
p.lci2=quantile(na.omit(P.opt2), 0.025)[[1]],
p.uci2=quantile(na.omit(P.opt2), 0.975)[[1]],
mean.Tmax=mean(na.omit(T.max)),
Tmax.lci=quantile(na.omit(T.max), 0.025)[[1]],
Tmax.uci=quantile(na.omit(T.max), 0.975)[[1]],
mean.coefa=mean(na.omit(coefa)),
coefa.lci=quantile(na.omit(coefa), 0.025)[[1]],
coefa.uci=quantile(na.omit(T.max), 0.975)[[1]],
mean.coefb=mean(na.omit(coefb)),
coefb.lci=quantile(na.omit(coefb), 0.025)[[1]],
coefb.uci=quantile(na.omit(coefb), 0.975)[[1]],
mean.Tmin=mean(na.omit(Tmin)),
Tmin.lci=quantile(na.omit(Tmin), 0.025)[[1]],
Tmin.uci=quantile(na.omit(Tmin), 0.975)[[1]]
)
#for plotting values into plot
#m2t1= round(tmax.data[[i]]$mean.Tmax, 1)
#m2t2 =round(tmax.data[[i]]$mean.Topt2, 1)
#m2t3 = round(tmax.data[[i]]$mean.Popt2, 1)
#eq4= bquote('T' [max] == .(m2t1))
#eq5= bquote('T' [opt] == .(m2t2))
#eq6= bquote("P" [opt] == .(m2t3))
#text(45, 23.5, eq4, col="red", pos=2, cex=0.75);
#text(45, 22, eq5, col="red", pos=2, cex=0.75)
#text(45, 20.5, eq6, col="red", pos=2, cex=0.75)
}
dev.off()
i
uid
df1
atdat=read.csv("/Users/timothyperez/Desktop/ATData/literature_AT_ancillary.03.18.2021.v1.csv")
#Remove data deemd to have poor model fits
poor.fits=c(65, 114, 48, 49, 63, 465, 466, 467, 468, 80, 81, 82, 129, 131, 415, 32, 33, 149, 151, 437, 401, 402, 410, 223, 224, 225, 162, 500, 504, 377, 501)
atdat=atdat[-which(atdat$curveID %in% poor.fits),]
which(unique(atdat$curveID)==65); which(unique(atdat$curveID)==114) #check to make sure these are gone
colnames(atdat)[which(colnames(atdat)=="Tleaf_C")]="Tleaf"
colnames(atdat)[which(colnames(atdat)=="A_umol_m2_s")]="A"
#Unique ID's for AT curves
atdat$uid=paste(atdat$Accepted.name, atdat$SourceT90, atdat$curveID)
#Remove any curves with fewer than 5 data points
freqdf=data.frame(table(atdat$uid))
lessthan5=freqdf[which(freqdf$Freq<5),]$Var1
atdat=atdat[-which(atdat$uid %in% lessthan5),]
#Unique number of curves
uid=sort(unique(atdat$uid))
#View the data:
#par(mfrow=c(3,7), mai=c(0,0,0,0), mgp=c(1.5,.35, 0), oma=c(4, 5, 1, 1), cex.lab=1.25, cex.axis=0.75)
#tomeg.data=tmax.data=list(); set.seed(23)
#for(i in 1:length(uid)){
df1=atdat[which(atdat$uid==uid[i]),]
plot(df1$Tleaf, df1$A, col=alpha("dark green", .5), ylim=c(0,65), pch=19,
xlim=c(0,54), ann=FALSE, yaxt='n', xaxt='n')#Plot all points for subset data
#arrows(df1$Tleaf, df1$A, df1$Tleaf, df1$A+(1.96*df1$sdA), angle=90, length=0.01, col=alpha("black", 0.25))
#arrows(df1$Tleaf, df1$A, df1$Tleaf, df1$A-(1.96*df1$sdA), angle=90, length=0.01, col=alpha("black", 0.25))
text(0,64 , pos=4, paste(unique(uid[i])), font=4,cex=.5)
#Paste into the plot at the given x,y coordinates, the name of the genus of interest
mtext(expression("Leaf temperature ("~degree~ "C)"), 1, 2, outer=TRUE)
mtext(expression("Photosynthesis ("~mu~"mol m"^-2~"s"^-1~")"), 2, 2, outer=TRUE)
axis(1, outer = T)
axis(2,outer = T)
axis(1, outer = F, labels = F)
axis(2,outer = F, labels = F)
}
#Uncomment below to make a .pdf
pdf("/Users/timothyperez/Desktop/ATData/A-T.curves..pdf", width = 8, height = 11)
par(mfrow=c(8,5), mai=c(0,0,0,0), mgp=c(1.5,.35, 0), oma=c(4, 5, 1, 1), cex.lab=1.25, cex.axis=0.75)
#plot(NULL, NULL, col=alpha("darkgreen", .5), ylim=c(0,30), xlim=c(25,46), ann=FALSE, yaxt='n', xaxt='n')
tomeg.data=tmax.data=list(); set.seed(23) #length(uid)
for(i in 1:length(uid)){
df1=atdat[which(atdat$uid==uid[i]),]
plot(df1$Tleaf, df1$A, col=alpha("dark green", .5), ylim=c(0,65), pch=19,
xlim=c(0,54), ann=FALSE, yaxt='n', xaxt='n')#Plot all points for subset data
#arrows(df1$Tleaf, df1$A, df1$Tleaf, df1$A+(1.96*df1$sdA), angle=90, length=0.01, col=alpha("black", 0.25))
#arrows(df1$Tleaf, df1$A, df1$Tleaf, df1$A-(1.96*df1$sdA), angle=90, length=0.01, col=alpha("black", 0.25))
text(0,64 , pos=4, paste(unique(df1$Taxon)), font=4,cex=.5)
text(0,60 , pos=4, paste(unique(df1$SourceT90)), font=4,cex=.5)
text(0,56, pos=4, paste(unique(df1$curveID)), font=4,cex=.5)
#Paste into the plot at the given x,y coordinates, the name of the genus of interest
mtext(expression("Leaf temperature ("~degree~ "C)"), 1, 2, outer=TRUE)
mtext(expression("Photosynthesis ("~mu~"mol m"^-2~"s"^-1~")"), 2, 2, outer=TRUE)
axis(1, outer = T)
axis(2,outer = T)
axis(1, outer = F, labels = F)
axis(2,outer = F, labels = F)
#T.max=
P.opt=T.opt=T.omeg=c()#empty vectors that will hold estimates for Topt and Popt for each iteration of bootstrapping/resampling
Tleaf.predic=matrix(NA,75,1000)
#v bootstrapping starts
for(k in 1:1000){
srows <- sample(1:nrow(df1),nrow(df1),TRUE)#randomly selcts rows from our subset data
df2=df1[srows,]#here, select randomly sampled rows & create a data frame
#Below is an if, else logical statement that we use to "catch errors using the "try" function
#Basically, the try function just evaluates whether or not the nls function that we use to model our data produces an error
if(class(try(nls(A~ (Pop*exp(-((Tleaf - Top)/(omeg))^2)), data=df2, start = list(Pop=15,  Top=28, omeg=18)), silent=T)[[1]])=="nlsModel")
{fit.Tleaf <- nls(A~ (Pop*exp(-((Tleaf - Top)/(omeg))^2)), data=df2, start = list(Pop=15,  Top=28, omeg=18))
pred.df=data.frame(Tleafs = seq.int(from=min(na.omit(df2$Tleaf)), to=max(na.omit(df2$Tleaf)), length.out = 75))#list of x values (temperature values)
pred.Tleaf=predict(fit.Tleaf, newdata=list(Tleaf=pred.df$Tleafs), type='response', se.fit=TRUE)
df3=data.frame(Tleafs=pred.df$Tleafs, A=pred.Tleaf)
Tleaf.predic[,k]=pred.Tleaf #These are he predictions from the leaf temperatre model...in other words these are the assimilation rates
T.opt[k]=df3[which(df3$A==max(df3$A)),]$Tleafs#Here we extract the leaf temperature where assiilation is predictd to be highest
T.omeg[k]=coef(fit.Tleaf)[3]#Here we extract the leaf temperature where assiilation is predictd to be highest
P.opt[k]=max(df3$A)
}else{(class(try(nls(A~ (Pop*exp(-((Tleaf - Top)/(omeg))^2)), data=df2, start = list(Pop=15,  Top=28, omeg=18)), silent=T)[[1]])=="list")
Tleaf.predic[,k]="NA"
T.opt[k]="NA"
P.opt[k]="NA"
T.omeg[k]="NA"}
}
#^bootstrapping ends
Tleaf.predic=apply(Tleaf.predic, 2, as.numeric)#thisjust turns our matrix of predictions into numbers
predict.CI=matrix(NA,75,2)
mean.tcurve=c()
#Here this forloop just calculates the 95% confidence interval and the mean for our bootstrapped data
for (h in 1:length(Tleaf.predic[,1])){
predict.CI[h,]=quantile(na.omit(Tleaf.predic[h,]),c(0.025,0.975))
mean.tcurve[h]=mean(na.omit(Tleaf.predic[h,]))
}
xvals=seq.int(from=min(df1$Tleaf), to=max(df1$Tleaf), length.out = 75)
#lines(xvals, predict.CI[,1], lty=2, col="purple")
lines(xvals, mean.tcurve, col="black", lwd=1.5)
#lines(xvals, predict.CI[,2], lty=2, col="purple")
T.opt1=as.numeric(as.character(T.opt))
P.opt1=as.numeric(as.character(P.opt))
T.omeg=as.numeric(as.character(T.omeg))
tomeg.data[[i]]=data.frame(curveID=paste(unique(df1$curveID)),
Source=paste(unique(df1$SourceT90)),
Taxon=paste(unique(df1$Accepted.name)),
lat_measurement_site=paste(unique(df1$lat_measurement_site)),
lon_measurement_site=paste(unique(df1$lon_measurement_site)),
lat_provenance=paste(unique(df1$lat_provenance))[],
lon_provenance=paste(unique(df1$lon_provenance)),
elevation_m=paste(unique(df1$elevation_m)),
mean.Topt=mean(na.omit(T.opt1)),
t.lci=quantile(na.omit(T.opt1), 0.025)[[1]],
t.uci=quantile(na.omit(T.opt1), 0.975)[[1]],
mean.Popt=mean(na.omit(P.opt1)),
p.lci=quantile(na.omit(P.opt1), 0.025)[[1]],
p.uci=quantile(na.omit(P.opt1), 0.975)[[1]],
mean.Tomeg=mean(na.omit(T.omeg)),
Tomeg.lci=quantile(na.omit(T.omeg), 0.025)[[1]],
Tomeg.uci=quantile(na.omit(T.omeg), 0.975)[[1]])
#plotting values into plot
#t1=round(tomeg.data[[i]]$mean.Tomeg, 1)
#t2=round(tomeg.data[[i]]$mean.Topt, 1)
#t3=round(tomeg.data[[i]]$mean.Popt, 1)
#eq1= bquote(Omega == .(t1))
#eq2= bquote('T' [opt] == .(t2))
#eq3= bquote("P" [opt] == .(t3))
#text(45, 28, eq1, col="black", pos=2, cex=0.75);
#text(45, 26.5, eq2, col="black", pos=2, cex=0.75)
#text(45, 25, eq3, col="black", pos=2, cex=0.75)
P.opt2=T.opt2=T.max=coefa=coefb=T.min=c()#empty vectors that will hold estimates for Topt and Popt for each iteration of bootstrapping/resampling
Tleaf.predic2=matrix(NA,75,1000)
#v bootstrapping starts
for(k in 1:1000){
srows <- sample(1:nrow(df1),nrow(df1),TRUE)#randomly selcts rows from our subset data
df2=df1[srows,]#here, select randomly sampled rows & create a data frame
#Below is an if, else logical statement that we use to "catch errors using the "try" function
#Basically, the try function just evaluates whether or not the nls function that we use to model our data produces an error
if(class(try(nls(A~ (b*(Tleaf - Tmin)*( 1-( exp(cc*(Tleaf-Tmax)))))^2, data=df2, start = list(b=.1, cc=.1, Tmax=48, Tmin=13)), silent=T)[[1]])=="nlsModel")
{fit.Tleaf2 <- nls(A~ (b*(Tleaf - Tmin)*( 1-( exp(cc*(Tleaf-Tmax)))))^2, data=df2, start = list(b=.1, cc=.1, Tmax=48, Tmin=13))
pred.df2=data.frame(Tleafs = seq.int(from=min(na.omit(df2$Tleaf)), to=max(na.omit(df2$Tleaf)), length.out = 75))#list of x values (temperature values)
pred.Tleaf2=predict(fit.Tleaf, newdata=list(Tleaf=pred.df$Tleafs), type='response', se.fit=TRUE)
#x.fit.PET=seq(from = 171, to = 1440, by=31)
#pred.PET=predict(fit.PET, list(Rainy.days=x.fit.PET))
df32=data.frame(Tleafs=pred.df2$Tleafs, A=pred.Tleaf2)
Tleaf.predic2[,k]=pred.Tleaf2 #These are he predictions from the leaf temperatre model...in other words these are the assimilation rates
T.opt2[k]=df32[which(df32$A==max(df32$A)),]$Tleafs#Here we extract the leaf temperature where assiilation is predictd to be highest
T.max[k]=coef(fit.Tleaf2)[3]#Here we extract the leaf temperature where assiilation is predictd to be highest
P.opt2[k]=max(df32$A)
coefa[k]=coef(fit.Tleaf2)[1]
coefb[k]=coef(fit.Tleaf2)[2]
T.min[k]=coef(fit.Tleaf2)[4]
#aftop=df3[which(df3$Tleafs>30),]
#T.max[k]=which(abs(aftop$A-1)==min(abs(aftop$A-1)))
#lines(pred.df$GDs, pred.GD, col=alpha(df2$kolor, 0.025))
}else{(class(try(nls(A~ (b*(Tleaf - Tmin)*( 1-( exp(cc*(Tleaf-Tmax)))))^2, data=df2, start = list(b=.1, cc=.1, Tmax=48, Tmin=13)), silent=T)[[1]])=="list")
Tleaf.predic2[,k]="NA"
T.opt2[k]="NA"
P.opt2[k]="NA"
T.max[k]="NA"
}}
#^bootstrapping ends
Tleaf.predic2=apply(Tleaf.predic2, 2, as.numeric)#thisjust turns our matrix of predictions into numbers
predict.CI2=matrix(NA,75,2)
mean.tcurve2=c()
#Here this forloop just calculates the 95% confidence interval and the mean for our bootstrapped data
for (h in 1:length(Tleaf.predic2[,1])){
predict.CI[h,]=quantile(na.omit(Tleaf.predic2[h,]),c(0.025,0.975))
mean.tcurve2[h]=mean(na.omit(Tleaf.predic2[h,]))
}
xvals2=seq.int(from=min(df1$Tleaf), to=max(df1$Tleaf), length.out = 75)
lines(xvals2, mean.tcurve2, col="red", lwd=1.5)
T.opt2=as.numeric(as.character(T.opt2))
P.opt2=as.numeric(as.character(P.opt2))
T.max=as.numeric(as.character(T.max))
coefa=as.numeric(as.character(coefa))
coefb=as.numeric(as.character(coefb))
Tmin=as.numeric(as.character(T.min))
tmax.data[[i]]=data.frame(curveID=paste(unique(df1$curveID)),
Source=paste(unique(df1$SourceT90)),
Taxon=paste(unique(df1$Accepted.name)),
mean.Topt2=mean(na.omit(T.opt2)),
t.lci2=quantile(na.omit(T.opt2), 0.025)[[1]],
t.uci2=quantile(na.omit(T.opt2), 0.975)[[1]],
mean.Popt2=mean(na.omit(P.opt2)),
p.lci2=quantile(na.omit(P.opt2), 0.025)[[1]],
p.uci2=quantile(na.omit(P.opt2), 0.975)[[1]],
mean.Tmax=mean(na.omit(T.max)),
Tmax.lci=quantile(na.omit(T.max), 0.025)[[1]],
Tmax.uci=quantile(na.omit(T.max), 0.975)[[1]],
mean.coefa=mean(na.omit(coefa)),
coefa.lci=quantile(na.omit(coefa), 0.025)[[1]],
coefa.uci=quantile(na.omit(T.max), 0.975)[[1]],
mean.coefb=mean(na.omit(coefb)),
coefb.lci=quantile(na.omit(coefb), 0.025)[[1]],
coefb.uci=quantile(na.omit(coefb), 0.975)[[1]],
mean.Tmin=mean(na.omit(Tmin)),
Tmin.lci=quantile(na.omit(Tmin), 0.025)[[1]],
Tmin.uci=quantile(na.omit(Tmin), 0.975)[[1]]
)
#for plotting values into plot
#m2t1= round(tmax.data[[i]]$mean.Tmax, 1)
#m2t2 =round(tmax.data[[i]]$mean.Topt2, 1)
#m2t3 = round(tmax.data[[i]]$mean.Popt2, 1)
#eq4= bquote('T' [max] == .(m2t1))
#eq5= bquote('T' [opt] == .(m2t2))
#eq6= bquote("P" [opt] == .(m2t3))
#text(45, 23.5, eq4, col="red", pos=2, cex=0.75);
#text(45, 22, eq5, col="red", pos=2, cex=0.75)
#text(45, 20.5, eq6, col="red", pos=2, cex=0.75)
}
dev.off()
tomegdat=do.call("rbind", tomeg.data)
tmaxdat=do.call("rbind", tmax.data)
cropz=read.csv("AT_pathways-cultivated.info.csv")
td.a=merge(tomegdat, tmaxdat)
cropz=read.csv("AT_pathways-cultivated.info.csv")
td.b=td.a(tomegdat, cropz, by.x=tomegdat$Taxon, by.y="Accepted.name")
td.a=merge(tomegdat, tmaxdat)
cropz=read.csv("AT_pathways-cultivated.info.csv")
td.b=td.a(tomegdat, cropz, by.x=tomegdat$Taxon, by.y="Accepted.name")
td.b=merge(td.a, cropz, by.x=td.a$Taxon, by.y="Accepted.name")
td.b=merge(td.a, cropz, by.x=c("Taxon"), by.y=c("Accepted.name"))
setwd("/Users/timothyperez/Desktop/ATData/")
td.b
td.b=merge(td.a, cropz, by.x=c("Taxon"), by.y=c("Accepted.name"), all.x=T)
str(td.b)
setwd("/Users/timothyperez/Desktop/ATData/")
plot(td.b$mean.Tomeg, td.b$mean.Popt)
td.b$cultivated
tdx=td.b[-which(td.b$cultivated=="N")]
plot(tdx$mean.Tomeg, tdx$mean.Popt)
tdx=td.b[-which(td.b$cultivated=="N"),]
plot(tdx$mean.Tomeg, tdx$mean.Popt)
plot( tdx$mean.Popt, tdx$mean.Tomeg)
tdx
tdx=td.b[-which(td.b$cultivated=="Y"),]
plot( tdx$mean.Popt, tdx$mean.Tomeg)
setwd("/Users/timothyperez/Desktop/ATData/")
write.csv(td.a, file="Photosynthetic.parameters.April.19.2021.csv")
write.csv(td.b, file="Photosynthetic.parameters.April.19.2021.csv")
